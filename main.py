 # -*- coding: utf-8 -*-
import codecs

from aiogram import Bot, Dispatcher, executor, types

from aiogram.types import InlineQuery, \
    InputTextMessageContent, InlineQueryResultArticle

from aiogram.utils.markdown import link

from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

from modules import start as start
#–°–ü–ê–°–ò–ë–û –ó–ê –ü–û–ö–£–ü–ö–£ –ë–û–¢–ê –ù–ê FUNPAY -- –ü–†–û–î–ê–í–ï–¶: https://funpay.com/users/3386372/

bot = Bot(token="TOKEN") # –í–≤–æ–¥–∏–º –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏–ª–∏ —É BotFather

dp = Dispatcher(bot)

print('Bot Start! FunPay BOT - misha125lol')

user_cd = "user/"
film_cd = 'films/films.txt'
channels_cd = 'channels/channels.txt'
id_cd = 'id/id.txt'


adm_id = 'ID' # ID –∏–∑ userinfobot

async def reg(a,b):
    try:
        try:
            with codecs.open(str(user_cd) + str(a) +".txt", 'r' ,encoding="UTF-8") as file:
                file.close()
               
        except:
            
            with codecs.open(str(user_cd) + str(a) +  ".txt", 'w' ,encoding="UTF-8") as file:
                file.write("{'name_film': 0,'link_film': 0,'num_film': 0,'quest': 0,'link_channel': 0}")
                file.close()
           
           
            with codecs.open("all_users/all_users.txt", 'r' ,encoding="UTF-8") as file:
                q = str(file.readline())
                q = eval(q)
                file.close()
            
            q.append(str(a))
            
            with codecs.open("all_users/all_users.txt", 'w' ,encoding="UTF-8") as file:
                file.write(str(q))
                file.close()

    
        with codecs.open(str(user_cd) + str(a) +".txt", 'r' ,encoding="UTF-8") as file:
            user_data = str(file.readline())
            file.close()

        return eval(str(user_data))
        
    except Exception as ex:
        print(ex)


@dp.message_handler(commands = ['admin'])
async def send_welcome(message):

    user = await reg(a = str(message.from_user.id), b = str(message.from_user.username))
    
    if str(adm_id) == str(message.from_user.id):

        inline_kb1 = InlineKeyboardMarkup()

        inline_btn_1 = InlineKeyboardButton('üìå–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ', callback_data='add_send')
        
        inline_btn_2 = InlineKeyboardButton('üìå–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π', callback_data='add_send_photo')
        
        inline_btn_3 = InlineKeyboardButton('üé•–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º', callback_data='add_film')
        
        inline_btn_4 = InlineKeyboardButton('üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stat')
        
        inline_btn_5 = InlineKeyboardButton('üìå–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞', callback_data='delete_number')
        
        inline_kb1.add(inline_btn_1).add(inline_btn_2).add(inline_btn_3).add(inline_btn_4).add(inline_btn_5)
        
        await bot.send_message(chat_id = message.from_user.id,text = '*–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º —Ñ—É–Ω–∫—Ü–∏—é: *',parse_mode = 'Markdown',reply_markup = inline_kb1)

@dp.message_handler(content_types=['photo'])
async def handle_docs_photo(message):

    user = await reg(a = str(message.from_user.id), b = str(message.from_user.username))


    if user['quest'] == 888:

        with codecs.open("id/id.txt", 'r' ,encoding="UTF-8") as file:
            q = str(file.readline())
            q = eval(q)
            file.close()
            
        q = int(q) + 1

        with codecs.open("id/id.txt", 'w' ,encoding="UTF-8") as file:
            file.write(str(q))
            file.close()

        await message.photo[-1].download('photo/photo_' + str(q) + '.jpg')


        user['quest'] = 0
        
        with codecs.open(str(user_cd) + str(message.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
            file.write(str(user))
            file.close()

        with codecs.open("all_users/all_users.txt", 'r' ,encoding="UTF-8") as file:
            g = str(file.readline())
            g = eval(g)
            file.close()
        
        for i in g:
            try:
                print(1)
                await bot.send_photo(chat_id = i,photo = open('photo/photo_' + str(q) + '.jpg','rb'),caption = str(message.caption))
            except Exception as ex:
                print(ex)
        
        await bot.send_message(chat_id = message.from_user.id, text = '–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.')
        

@dp.message_handler(commands = ['start'])
async def send_welcome(message):

    a = 0
    c = 0
    
    user = await reg(a = str(message.from_user.id), b = str(message.from_user.username))


    with codecs.open(str(channels_cd), 'r' ,encoding="UTF-8") as file:
        channels_me = str(file.readline())
        channels_me = eval(channels_me)
        file.close()
    

    if len(channels_me) == 0:
        c = 1
    else:
        inline_kb1 = InlineKeyboardMarkup()
        for i in channels_me:
            user_channel_status = await bot.get_chat_member(chat_id='@' + str(i), user_id= message.from_user.id)

            if user_channel_status["status"] == 'left':
                

                for i in channels_me:
                    inline_btn_1 = InlineKeyboardButton(str(channels_me[i]), url='https://t.me/'+ str(i))
                    
                    inline_kb1.add(inline_btn_1)
                
                inline_btn_2 = InlineKeyboardButton('–ü–æ–∏—Å–∫', callback_data='check')
                inline_kb1.add(inline_btn_2)
                
                await bot.send_message(chat_id = message.from_user.id, text = '*üìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:*',reply_markup = inline_kb1,parse_mode = 'Markdown')
                c = 0
                break
            else:
                c = 1
    if c == 1:

       # await bot.send_message(message.from_user.id, text = '*–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ üçø–ö–ò–ù–û–ü–û–ò–°–ö | –ü–æ–∏—Å–∫üîç\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –Æ–¢–£–ë | –¢–ò–ö –¢–û–ö –≤–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´üîé–ü–æ–∏—Å–∫¬ª üëá*',parse_mode = 'Markdown',reply_markup = start.greet_kb1)
       await bot.send_photo(
        chat_id=message.from_user.id, 
        photo='https://img.freepik.com/free-photo/man-watching-interesting-movie-in-cinema_23-2147803823.jpg', 
        caption='*–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ üçø–ö–ò–ù–û–ü–û–ò–°–ö | –ü–æ–∏—Å–∫üîç\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –Æ–¢–£–ë | –¢–ò–ö –¢–û–ö –≤–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´üîé–ü–æ–∏—Å–∫¬ª üëá*', 
        parse_mode='Markdown', 
        reply_markup=start.greet_kb1
)

@dp.callback_query_handler(text = 'stat')
async def vote_up_cb_handler(call):
    user = await reg(a = str(call.from_user.id), b = str(call.from_user.username))

    with codecs.open("all_users/all_users.txt", 'r' ,encoding="UTF-8") as file:
        q = str(file.readline())
        q = eval(q)
        file.close()

    await bot.send_message(call.from_user.id, text = '*üìà–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –±–æ—Ç–µ: ' + str(len(q)) + '*',parse_mode = 'Markdown')

@dp.callback_query_handler(text = 'add_channel')
async def vote_up_cb_handler(call):
    user = await reg(a = str(call.from_user.id), b = str(call.from_user.username))

    user['quest'] = 200

    with codecs.open(str(user_cd) + str(call.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
        file.write(str(user))
        file.close()

    await bot.send_message(call.from_user.id, text = '*–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –±–µ–∑ @\n\n–ü—Ä–∏–º–µ—Ä: –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ @twochannel, –≤–≤–µ–¥–∏—Ç–µ twochannel*',parse_mode = 'Markdown')

@dp.callback_query_handler(text = 'delete_number')
async def vote_up_cb_handler(call):
    user = await reg(a = str(call.from_user.id), b = str(call.from_user.username))

    user['quest'] = 6661

    with codecs.open(str(user_cd) + str(call.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
        file.write(str(user))
        file.close()

    await bot.send_message(call.from_user.id, text = '*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å*',parse_mode = 'Markdown')


@dp.callback_query_handler(text = 'delete_channel')
async def vote_up_cb_handler(call):
    user = await reg(a = str(call.from_user.id), b = str(call.from_user.username))

    user['quest'] = 500
    
    h = ''
    
    with codecs.open(str(user_cd) + str(call.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
        file.write(str(user))
        file.close()

    with codecs.open(str(channels_cd), 'r' ,encoding="UTF-8") as file:
        channels_me = str(file.readline())
        channels_me = eval(channels_me)
        file.close()
    
    for i in channels_me:
        h = h + str(i) + '\n'
    
    await bot.send_message(call.from_user.id, text = '*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:\n' + str(h) + '\n\n–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å.*',parse_mode = 'Markdown')



@dp.callback_query_handler(text = 'add_send')
async def vote_up_cb_handler(call):
    user = await reg(a = str(call.from_user.id), b = str(call.from_user.username))

    user['quest'] = 100

    with codecs.open(str(user_cd) + str(call.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
        file.write(str(user))
        file.close()

    await bot.send_message(call.from_user.id, text = '*‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏*',parse_mode = 'Markdown')


@dp.callback_query_handler(text = 'add_send_photo')
async def vote_up_cb_handler(call):
    user = await reg(a = str(call.from_user.id), b = str(call.from_user.username))

    user['quest'] = 888

    with codecs.open(str(user_cd) + str(call.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
        file.write(str(user))
        file.close()

    await bot.send_message(call.from_user.id, text = '*‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏*',parse_mode = 'Markdown')


@dp.callback_query_handler(text = 'add_film')
async def vote_up_cb_handler(call):
    user = await reg(a = str(call.from_user.id), b = str(call.from_user.username))
    
    user['quest'] = 1

    with codecs.open(str(user_cd) + str(call.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
        file.write(str(user))
        file.close()

    await bot.send_message(call.from_user.id, text = '*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä, –ø–æ–¥ –∫–æ—Ç–æ—Ä—ã–º –±—É–¥–µ—Ç —Ñ–∏–ª—å–º*',parse_mode = 'Markdown')


@dp.callback_query_handler(text = 'check')
async def vote_up_cb_handler(call):
    a = 0
    c = 0
    
    user = await reg(a = str(call.from_user.id), b = str(call.from_user.username))


    with codecs.open(str(channels_cd), 'r' ,encoding="UTF-8") as file:
        channels_me = str(file.readline())
        channels_me = eval(channels_me)
        file.close()
    

    if len(channels_me) == 0:
        c = 1
    else:
        inline_kb1 = InlineKeyboardMarkup()
        for i in channels_me:
            user_channel_status = await bot.get_chat_member(chat_id='@' + str(i), user_id= call.from_user.id)

            if user_channel_status["status"] == 'left':
                

                for i in channels_me:
                    inline_btn_1 = InlineKeyboardButton(str(channels_me[i]), url='https://t.me/'+ str(i))
                    
                    inline_kb1.add(inline_btn_1)
                
                inline_btn_2 = InlineKeyboardButton('–ü–æ–∏—Å–∫', callback_data='check')
                inline_kb1.add(inline_btn_2)
                await bot.send_message(chat_id = call.from_user.id, text = '*üìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:*',reply_markup = inline_kb1,parse_mode = 'Markdown')
                c = 0
                break
            else:
                c = 1
    if c == 1:

       await bot.send_message(call.from_user.id, text = '*–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ üçø–ö–ò–ù–û–ú–û–õ–û–ö–û - –ë–û–¢ | –ü–æ–∏—Å–∫üîç\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –Æ–¢–£–ë | –¢–ò–ö –¢–û–ö –≤–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞.\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´üîé–ü–æ–∏—Å–∫¬ª üëá*',parse_mode = 'Markdown',reply_markup = start.greet_kb1) # –ù–µ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è


@dp.message_handler()
async def send_welcome(message):
    a = 0
    c = 0
    user = await reg(a = str(message.from_user.id), b = str(message.from_user.username))


    with codecs.open(str(channels_cd), 'r' ,encoding="UTF-8") as file:
        channels_me = str(file.readline())
        channels_me = eval(channels_me)
        file.close()
    

    if len(channels_me) == 0:
        c = 1
    else:
        inline_kb1 = InlineKeyboardMarkup()
        for i in channels_me:
            user_channel_status = await bot.get_chat_member(chat_id='@' + str(i), user_id= message.from_user.id)
            if user_channel_status["status"] == 'left':
                

                for i in channels_me:

                    inline_btn_1 = InlineKeyboardButton(str(channels_me[i]), url='https://t.me/'+ str(i))
                    
                    inline_kb1.add(inline_btn_1)
                
                inline_btn_2 = InlineKeyboardButton('–ü–æ–∏—Å–∫', callback_data='check')
                inline_kb1.add(inline_btn_2)
                await bot.send_message(chat_id = message.from_user.id, text = '*üìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:*',reply_markup = inline_kb1,parse_mode = 'Markdown')
                c = 0
                break
            else:
                c = 1
    if c == 1:
    
        if str(message.text) == 'üîé–ü–æ–∏—Å–∫':
            a = 1
            # await bot.send_message(chat_id = message.from_user.id,text = '*üîé –î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ö–û–î —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞, –µ—Å–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏—Ç–µ –æ—à–∏–±–∫—É - –±–æ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç. \n\n–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @kinonewsTT*',parse_mode = 'Markdown')
            await bot.send_photo(
            chat_id=message.from_user.id, 
            photo='https://i.work.ua/article/1455b.jpg', 
            caption='*üîé –î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ö–û–î —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞, –µ—Å–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏—Ç–µ –æ—à–∏–±–∫—É - –±–æ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç. \n\n–ù–∞—à —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @kinonewsTT*', 
            parse_mode='Markdown', 
            reply_markup=start.greet_kb1
)
        if user['quest'] == 1 and a == 0:
            a = 1

            with codecs.open(str(film_cd), 'r' ,encoding="UTF-8") as file:
                q = str(file.readline())
                q = eval(q)
                file.close()

            
            if str(message.text) in q:
                

                user['quest'] = 0

                with codecs.open(str(user_cd) + str(message.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
                    file.write(str(user))
                    file.close()
                
                await bot.send_message(chat_id = message.from_user.id, text = '*–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.*',parse_mode = 'Markdown')
            
            else:
              

                user['quest'] = 3
                user['num_film'] = str(message.text)
                
                
                with codecs.open(str(user_cd) + str(message.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
                    file.write(str(user))
                    file.close()
            
                
                await bot.send_message(chat_id = message.from_user.id, text = '*–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:*',parse_mode = 'Markdown')

        if user['quest'] == 3 and a == 0:
            a = 1
            
            user['link_film'] = str(message.text)
            user['quest'] = 992
            
            with codecs.open(str(user_cd) + str(message.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
                file.write(str(user))
                file.close()
            
            
            
            await bot.send_message(chat_id = message.from_user.id, text = '*–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ñ–∏–ª—å–º–∞*',parse_mode = 'Markdown')


        if user['quest'] == 992 and a == 0:
            a = 1
            with codecs.open(str(film_cd), 'r' ,encoding="UTF-8") as file:
                q = str(file.readline())
                q = eval(q)
                file.close()
            
            q[str(user['num_film'])] = [str(message.text), str(user['link_film'])]
            
            with codecs.open(str(film_cd), 'w' ,encoding="UTF-8") as file:
                file.write(str(q))
                file.close()
            
            user['quest'] = 0
            
            with codecs.open(str(user_cd) + str(message.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
                file.write(str(user))
                file.close()
            
            
            
            await bot.send_message(chat_id = message.from_user.id, text = '*–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*',parse_mode = 'Markdown')

        if user['quest'] == 100 and a == 0:
            a = 1

            user['quest'] = 0
            
            with codecs.open(str(user_cd) + str(message.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
                file.write(str(user))
                file.close()

            with codecs.open("all_users/all_users.txt", 'r' ,encoding="UTF-8") as file:
                q = str(file.readline())
                q = eval(q)
                file.close()
            
            for i in q:
                try:
                    await bot.send_message(chat_id = i, text = str(message.text))
                except:
                    pass
            
            
            await bot.send_message(chat_id = message.from_user.id, text = '*–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.*',parse_mode = 'Markdown') 
            
        
        if user['quest'] == 200 and a == 0:
            a = 1
            
            user['link_channel'] = str(message.text)
            
            user['quest'] = 300
            
            with codecs.open(str(user_cd) + str(message.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
                file.write(str(user))
                file.close()
            
            
            await bot.send_message(chat_id = message.from_user.id, text = '*–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞*',parse_mode = 'Markdown')

        if user['quest'] == 300 and a == 0:
            a = 1


            user['quest'] = 0
            
            with codecs.open(str(user_cd) + str(message.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
                file.write(str(user))
                file.close()


            with codecs.open(str(channels_cd), 'r' ,encoding="UTF-8") as file:
                channels_me = str(file.readline())
                channels_me = eval(channels_me)
                file.close()

            
            channels_me[str(user['link_channel'])] = str(message.text)
            
            with codecs.open(str(channels_cd), 'w' ,encoding="UTF-8") as file:
                file.write(str(channels_me))
                file.close()

            await bot.send_message(chat_id = message.from_user.id, text = '*–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*',parse_mode = 'Markdown')
            

        if user['quest'] == 6661 and a == 0:
            a = 1

            user['quest'] = 0
            
            with codecs.open(str(user_cd) + str(message.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
                file.write(str(user))
                file.close()
            

            with codecs.open(str(film_cd), 'r' ,encoding="UTF-8") as file:
                q = str(file.readline())
                q = eval(q)
                file.close()
            

            if str(message.text) in q:
                del q[str(message.text)]
                
                with codecs.open(str(film_cd), 'w' ,encoding="UTF-8") as file:
                    file.write(str(q))
                    file.close()
                
                await message.reply('–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω')
            
            else:
                await message.reply('–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')


        if user['quest'] == 500 and a == 0:
            a = 1


            user['quest'] = 0
            
            with codecs.open(str(user_cd) + str(message.from_user.id) +".txt", 'w' ,encoding="UTF-8") as file:
                file.write(str(user))
                file.close()


            with codecs.open(str(channels_cd), 'r' ,encoding="UTF-8") as file:
                channels_me = str(file.readline())
                channels_me = eval(channels_me)
                file.close()
            
            if str(message.text) in channels_me:
                del channels_me[str(message.text)]
                
                with codecs.open(str(channels_cd), 'w' ,encoding="UTF-8") as file:
                    file.write(str(channels_me))
                    file.close()
                
                await bot.send_message(chat_id = message.from_user.id,text ='*–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞!*',parse_mode = 'Markdown')
            
            else:
                
                await bot.send_message(chat_id = message.from_user.id,text ='*–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞!*',parse_mode = 'Markdown')

                
        if a == 0:
            a = 1
            print(11)
            with codecs.open(str(film_cd), 'r' ,encoding="UTF-8") as file:
                q = str(file.readline())
                q = eval(q)
                file.close()
            
            if str(message.text) in q:
                try:
                    await bot.send_photo(chat_id = message.from_user.id, photo = str(q[str(message.text)][0]),caption = '*üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ "' + q[str(message.text)][1] + '"*',parse_mode = 'Markdown')
                except Exception as ex:
                    print(ex)
#–°–ü–ê–°–ò–ë–û –ó–ê –ü–û–ö–£–ü–ö–£ –ë–û–¢–ê –ù–ê FUNPAY -- –ü–†–û–î–ê–í–ï–¶: https://funpay.com/users/3386372/
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates = False)
    


    
    
    

